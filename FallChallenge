#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/


/*void    ft_strcpy(char **dst, char *src)
{
    int i = 0;

    while (src[i])
    {
        (*dst)[i] = src[i];
        i++;
    }
    (*dst)[i] = '\0';
}*/
typedef struct building_type
{
    char    type;
    char    id;
    char    x;
    char    y;
    char    n_astronauts;
    int     astronauts[20];
}   building_struct;

building_struct **buildings;
int             b_counter = 0;

int ctoi(char   c)
{
    if ((c < 91 && c > 64) || (c < 123 && c > 96))
        return (c - 48);
    return (0);
}

int match_types(int in)
{
    for (int i = 0; i < 20; i++)
    {
        if (buildings[in]->astronauts[i])
        {
            fprintf(stderr, "Llega");
            for (int j = 0; j < b_counter; j++)
            {
                if (buildings[j]->type == i + 1)
                    return (j);
            }
        }
    }
    return (0);
}

void    add_building(char *building_properties)
{
    buildings[b_counter] = malloc(sizeof(building_struct));
    buildings[b_counter]->type = building_properties[0];
    buildings[b_counter]->id = building_properties[2];
    buildings[b_counter]->x = building_properties[4];
    buildings[b_counter]->y = building_properties[6];
    if (buildings[b_counter]->type == 0)
    {
        fprintf(stderr, "Llega");
        buildings[b_counter]->n_astronauts = building_properties[8];
        for (int i = 0; i < 20; i++)
            buildings[b_counter]->astronauts[i] = 0;
        int i = 1;
        while (i <= 20)
        {
            int j = 10;
            while (building_properties[j])
            {
                if (ctoi(building_properties[j]) == i)
                    buildings[b_counter]->astronauts[i - 1]++;
                if (building_properties[j + 1])
                    j += 2;
                else
                    j++;
            }
            i++;
        }
    }
    else
        buildings[b_counter]->n_astronauts = '0';
    //for (int i = 0; i < 20; i++)
            //fprintf(stderr, "%i", buildings[b_counter]->astronauts[i]);
    b_counter++;
}

int main()
{
    buildings = malloc(3 * sizeof(building_struct*));
    // game loop
    while (1) 
    {
        int resources;
        scanf("%d", &resources);

        int num_travel_routes;
        scanf("%d", &num_travel_routes);
        for (int i = 0; i < num_travel_routes; i++) 
        {
            int building_id_1;
            int building_id_2;
            int capacity;
            scanf("%d%d%d", &building_id_1, &building_id_2, &capacity);
        }

        int num_pods;
        scanf("%d", &num_pods); fgetc(stdin);
        for (int i = 0; i < num_pods; i++) 
        {
            char pod_properties[201];
            scanf("%[^\n]", pod_properties); fgetc(stdin);
        }

        int num_new_buildings;
        scanf("%d", &num_new_buildings); fgetc(stdin);
        for (int i = 0; i < num_new_buildings; i++) 
        {
            char building_properties[501];
            scanf("%[^\n]", building_properties); fgetc(stdin);
            add_building(building_properties);
        }
        for (int i = 0; i < b_counter; i++)
        {
            int d = match_types(i);
            if (d)
            {
                
                printf("TUBE 0 %i", d);
            }
        }
        /*if (num_new_buildings)
        {
            if (buildi)
        }
            printf("TUBE 0 3;POD 2 0 3 0 3\n");*/

        printf("TUBE 0 1; POD 0 0 1 0 1 0 1; TUBE 0 2; POD 1 0 2 0 2 0 2;\n");

        // Write an action using printf(). DON'T FORGET THE TRAILING \n
        // To debug: fprintf(stderr, "Debug messages...\n");

        // TUBE | UPGRADE | TELEPORT | POD | DESTROY | WAIT
    }

    return 0;
}
